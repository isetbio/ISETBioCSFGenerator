classdef neuralResponseEngine < handle
% Define a neuralResponseEngine class
%
% Syntax:
%   theNeuralResponseEngine =
%      neuralResponseEngine(noiseFreeComputeFunctionHandle, noisyInstancesComputeFunctionHandle, noiseFreeComputeParams, noisyInstancesComputeParams)
%
% Description:
%    The neuralResponseEngine stores the optics and coneMosaic returned by
%    its computeFunction (whenever they are returned), so that they can be
%    reused in subsequent calls of its computeFunction.
%
%
% Inputs:
%    noiseFreeComputeFunctionHandle     - Function handle to the noiseFreeComputeFunction that defines the
%                                       operation of the employed neural response pipeline
%
%    noiseFreeResponseParams           - Struct with parameters specific to the noiseFreeComputeFunction. 
%                                      Optional. If not defined, the default params
%                                      defined by the computeFunction are used
%
%    noisyInstancesComputeFunctionHandle - Function handle to the noisyInstancesComputeFunction that defines the
%                                       operation of the employed neural response pipeline
%
%    noisyInstancesResponseParams      - Struct with parameters specific to the noisyInstancesComputeFunction. 
%                                      Optional. If not defined, the default params
%                                      defined by the computeFunction are used
%
% Outputs:
%    The created neuralResponseEngine object.
%
% Optional key/value pairs: None
%
%
% See Also:
%    t_neuralResponseCompute.m
%

% History:
%    9/20/2020  NPC Wrote it

    %% Public properties
    properties

    end
    
    %% Private properties
    properties (SetAccess=private)        
        % User-supplied compute function handles for the neural computation routine
        noiseFreeComputeFunction
        noisyInstancesComputeFunction

        % User-supplied struct with all neural computation params
        noiseFreeComputeParams
        noisyInstancesComputeParams
        
        % The neural pipeline struct  - generated by the user-supplied compute function
        neuralPipeline
        
        % Valid noise flags
        validNoiseFlags = {'none', 'random'};
    end
    
    % Public methods
    methods
        % Constructor
        function obj = neuralResponseEngine(noiseFreeComputeFunctionHandle, noisyInstancesComputeFunctionHandle, noiseFreeComputeParams, noisyInstancesComputeParams)
            % Validate and set the scene compute function handle
            obj.validateAndSetComputeFunctionHandle(noiseFreeComputeFunctionHandle,noisyInstancesComputeFunctionHandle);
            
            % If we dont receice a paramsStruct as the second argument use
            % the default params returned by the neuralComputeFunctionHandle
            if (nargin == 2)
                noiseFreeComputeParams = obj.noiseFreeComputeFunction();
                noisyInstancesComputeParams = obj.noiseFreeComputeFunction();
            elseif (nargin ~= 4)
                error('Must pass either two or four arguments to nre constructor');
            end

            % Set the parameter structures
            obj.validateAndSetParamsStruct(noiseFreeComputeParams, noisyInstancesComputeParams);

        end
        
        % Method to set a custom neural pipeline
        function customNeuralPipeline(obj, thePipeline)
            obj.neuralPipeline = thePipeline;
        end
        
        % Compute method for noise free response
        [noiseFreeResponses, temporalSupportSeconds] = computeNoiseFree(obj, ...
                theSceneSequence, temporalSupportSeconds, varargin);

        % Compute method for noisy instances
        [noisyInstances, temporalSupportSeconds] = computeNoisyInstances(obj, ...
                noiseFreeResponses, temporalSupportSeconds, instancesNum, varargin);
        
        function updateParamsStruct(obj, paramsStruct)
            % Set the neural params
            obj.neuralParams = paramsStruct;
        end

        % Method to validate the passed noiseFlags
        validateNoiseFlags(obj,noiseFlags);
    end
    
    % Private methods
    methods (Access = private)
        % Method to validate and set the scene compute function handle
        validateAndSetComputeFunctionHandle(obj,computeNoiseFreeFunctionHandle,computeNoisyInstancesFunctionHandle);

        % Method to validate and set the scene params struct
        validateAndSetParamsStruct(obj,computeNoiseFreeParamsStruct,computeNoisyInstancesParamsStruct);
    end
    
end