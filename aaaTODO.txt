1) The transition from coneMosaicHex is not complete.  We need to ablate this from the main thread.

To find what needs to be done, global search on ConeMosaicHex will get you most of them.

2) Can we delete ComputeParameterThreshold.m?

3) There are a lot of versions of different nre's that use the cMosaic.  Rationalize.  Perhaps all the specific ones should be implemented as calls into the most general one?

nrePhotopigmentExcitationsCmosaicWithNoEyeMovements.m: why do we need to compute the OIsequence at all time samples even though only the oi of the first frame is used (line 209-250)? Size of theNeuralResponses(noiseFlags{idx}) = #trials x #timeSamples x #cones

nrePhotopigmentExcitationsCmosaic.m: Size of theNeuralResponses(noiseFlags{idx}) = #trials x #timeSamples x #cones. All the oiSequence is passed into theConeMosaic.compute function unlike the function above. nrePhotopigmentExcitationsCmosaicWithNoEyeMovements.m is more like a special case, and it's suitable when the optical image does not differ across all time samples. 

nrePhotopigmentExcitationsSingleShot.m: Size of theNeuralResponses(noiseFlags{idx}) = #trials x 1 x #cones. This can totally be replaced by nrePhotopigmentExcitationsCmosaic.m without even specifying there is only one frame.

DHB: change the comments in nrePhotopigmentExcitationsSingleShot.m, nrePhotopigmentExcitationsCmosaicWithNoEyeMovements.m to describe what they do, and to indicate that they are special cases of nrePhotopigmentExcitationsCmosaic.m; keep the first two functions, but when called, direct to nrePhotopigmentExcitationsCmosaic.m (backward compatibility) and +error message ('this is a better way to call the function ... ). Add a check that the oiSequence satisfies that either it has one frame or all the frames are the same (oiGet(oi, 'photons') returns 3d matrix).  


4) Similarly, we need to think about whether we need both TAFC versions of various stuff and the NWay_OneStimulusPerTrial.  Can we make the TAFC versions calls into the NWay_OneSTimulusPerTrial?

=================================================================================================
Notes (need further discussion before making any changes)
1) computeFunctions/scene/sceGrating.m
There is a helper function inside this function, called generatePresentationDisplay. It assumes a default screen display 'LCD-Apple', which cannot be changed. Perhaps we can add a field 'screenDisplay' to the struct gratingParams to have more flexibility.
	DHB: Yes, good.  Make default 'LCD-Apple' so the default behavior is unchanged.
	FH: Done.

3) there is a bug in t_NWay_OneStimPerTrial.m (can't run). The bug is it calls computeThresholdNWay_OneStimulusPerTrial -> computePerformanceNWay_OneStimulusPerTrial -> combineContainersMat. It breaks at the last step because the input is only for 1 frame of a stimulus (i.e., dimension < 3). To fix it, we could either add temporalModulation as a varargin or replace createGratingScene with sceGrating.
	DHB: If we can make this work by special casing 2D inputs to treat them as one frame, that would be best. We think
	this problem arises because Matlab now squeezes trailing singleton dimensions of matrices, for better or worse.
	FH: this bug has been fixed by using nrePhotopigmentExcitationsCmosaicWithNoEyeMovements.m instead of nrePhotopigmentExcitationsConeMosaicHexWithNoEyeMovements.m. I guess the former returns a 3-d matrix (#trials x #timeSamples x #cones).
	There are some other bugs in the code (e.g., in computeThresholdNWay_OneStimulusPerTrial.m, I added line 119-123). The code can run now, but it seems like it's stuck in a weird loop. More debugging is required.
	DHB: rename t_NWay_OneStimPerTrial.m -> t_NWay_OneStimulusPerTrial.m

4) computeThresholdTAFC calls a function called spatioTemporalPoolingWeights.m when the inference engine needs to compute a template. The computation in the function is the same when we choose either 'linear' or 'quadratureEnergy'. It's not needed to get the template for phase-shifted stimuli when 'linear' is selected, so we can edit spatioTemporalPoolingWeights.m to speed up things a bit for the linear template. 
	DHB: perhaps we can.

5) if we set 'visualizeAllComponents' to be true when calling computePerformanceTAFC.m, then we can visualize the plot for cone responses. Perhaps we can also add a plotting function to visualize the trained classifier (line 131-133; theClassifierEngine.trainedClassifier) when 'visualizeAllComponents' is set to true. 
	DHB: perhaps we can.

6) when we compute templates by calling spatioTemporalPoolingWeights.m, it first computes the noise-free cone responses (size = 1 x #timeSamples x #cones), and then it selects the last time sample as the template. This could be problematic if someone creates a temporally modulated stimulus. 
	DHB: post the question to Nicolas.

7) @DHB: document quest 'blockedVal'

8) Figure out quest engine stopping rule and document (find out where minTrial & maxTrial is used)


Questions
1) I thought that there is only one classifier that segregates the responses to all null stimuli and the responses to all test stimuli, but I think this understanding is not correct. Based on the code, there is one classifier for every level of contrast. Should there be N classifiers where N denotes the number of contrast, or just one single classifier?

2) When I call nrePhotopigmentsExcitationsCMosaicWithNoEyeMovements.m, I got a warning:Warning: "The optical image resolution (4.20 microns) is too low relative to the cone aperture (3.36 microns) for accurate computation of cone blur. Skipping blur by cone aperture. Consider increasing the # of pixels in the stimulus or decrease the stimulus FOV." What is a reasonable value for # of pixels? 
	DHB: reduce the field of view instead of increase #pixels. Add a comment explaining the choice of small field of view is just for the purpose of this tutorial, and they have other options.

