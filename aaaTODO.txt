1) The transition from coneMosaicHex is not complete.  We need to ablate this from the main thread.

To find what needs to be done, global search on ConeMosaicHex will get you most of them.

2) Can we delete ComputeParameterThreshold.m?

3) There are a lot of versions of different nre's that use the cMosaic.  Rationalize.  Perhaps all the specific ones should be implemented as calls into the most general one?

4) Similarly, we need to think about whether we need both TAFC versions of various stuff and the NWay_OneStimulusPerTrial.  Can we make the TAFC versions calls into the NWay_OneSTimulusPerTrial?

=================================================================================================
Notes (need further discussion before making any changes)
1) computeFunctions/scene/sceGrating.m
There is a helper function inside this function, called generatePresentationDisplay. It assumes a default screen display 'LCD-Apple', which cannot be changed. Perhaps we can add a field 'screenDisplay' to the struct gratingParams to have more flexibility.
	DHB: Yes, good.  Make default 'LCD-Apple' so the default behavior is unchanged.
	FH: Done.

2) rename 't_neuralResponseComputeExternalPipeline' -> 't_neuralResponseComputeCustomizedPipeline'
	DHB: Yes.
	FH: Done.

3) there is a bug in t_NWay_OneStimPerTrial.m (can't run). The bug is it calls computeThresholdNWay_OneStimulusPerTrial -> computePerformanceNWay_OneStimulusPerTrial -> combineContainersMat. It breaks at the last step because the input is only for 1 frame of a stimulus (i.e., dimension < 3). To fix it, we could either add temporalModulation as a varargin or replace createGratingScene with sceGrating.
	DHB: If we can make this work by special casing 2D inputs to treat them as one frame, that would be best. We think
	this problem arises because Matlab now squeezes trailing singleton dimensions of matrices, for better or worse.

4) computeThresholdTAFC calls a function called spatioTemporalPoolingWeights.m when the inference engine needs to compute a template. The computation in the function is the same when we choose either 'linear' or 'quadratureEnergy'. It's not needed to get the template for phase-shifted stimuli when 'linear' is selected, so we can edit spatioTemporalPoolingWeights.m to speed up things a bit for the linear template. 

5) the example in rcePoolingSVMTAFC.m is probably not the best example because all that is done by computePerformanceTAFC.m. Perhaps we can put a better example here that calls computePerformanceTAFC.m instead of computing from scratch.  

6) 

Added comments
1) computeFunctions/scene/sceGrating.m
switch (gratingParams.temporalModulation), case 'flashed', 'drifted', 'counter phase modulated'
switch (gratingParams.spatialModulationDomain), case 'cartesian', 'polar'
switch (gratingParams.spatialEnvelope), case 'disk', 'soft', 'rect', 'halfcos'

Fixed bugs
1) t_modulatedGratingsSceneGeneration.m
Stimulus #5: the original stimulus was out of the display gamut.
To fix it, I added customGratingParams.warningInsteadOfErrorOnOutOfGamut = true;
Or I could reduce the 'conContrastModulation' to lower values (e.g., [0.1, 0.1, -0.1])
	DHB: Make it as high as you can within gamut.
	FH: Done.




