1) The transition from coneMosaicHex is not complete.  We need to ablate this from the main thread.

To find what needs to be done, global search on ConeMosaicHex will get you most of them.

2) Can we delete ComputeParameterThreshold.m?

3) Similarly, we need to think about whether we need both TAFC versions of various stuff and the NWay_OneStimulusPerTrial.  Can we make the TAFC versions calls into the NWay_OneSTimulusPerTrial?

computeThresholdNWay_OneStimulusPerTrial.m: use Quest to find test contrast values
	inputs: theTestSceneSquences (type: cell, size: 1 x nA; each cell is #trials x #times x #cones)
	-> computePerformanceNWay_OneStimulusPerTrial.m
		inputs: inSampleStimResponses (type: container, [1 x nA] cells, each cell is [#trials x #times x #cones]) 
		-> rcePoissonNWay_OneStimulusPerTrial.m: training, to compute the templates for different alternatives
		outputs: theClassifierEngine.preProcessingConstants (type: cell, size: 1 x nA; each cell is #time x #cones)
		-> rcePoissonNWay_OneStimulusPerTrial.m: making predictions
			inputs: responses and templates (type: mat, size: 1 x #cones)
			-> PoissonDecisionLogLikelihoood.m: computing log likelihood of each template given the responses
			outputs: binary responses 
		outputs: predictions (type: mat, size: 1 x #trials)

computeThresholdTAFC.m
	inputs: theNullSceneSequence, theTestSceneSequences (type: cell, size: 1 x #Times; each cell is a struct)
	-> computePerformanceTAFC.m: 
		outputs: inSampleNullStimResponses, inSampleTestStimResponses (type: container, size: 1 x 1; each container has a matrix [#trials x #times x #cones]
		-> rcePoissonTAFC.m: training, to compute the templates for the null and the test stimuli
		outputs: theClassifierEngine.preProcessingConstants.nullTemplate, theClassifierEngine.preProcessingConstants.testTemplate (type: mat, size: 1 x #cones]
		-> rcePoissonTAFC.m: making predictions
			inputs: responses and templates ()
			-> PoissonDecisionLogLikelihoood.m: computing log likelihood of each template



=================================================================================================
Notes (need further discussion before making any changes)
1) computeFunctions/scene/sceGrating.m
There is a helper function inside this function, called generatePresentationDisplay. It assumes a default screen display 'LCD-Apple', which cannot be changed. Perhaps we can add a field 'screenDisplay' to the struct gratingParams to have more flexibility.
	DHB: Yes, good.  Make default 'LCD-Apple' so the default behavior is unchanged.
	FH: Done. Need to double check if all the tutorials make the corresponding changes.

4) computeThresholdTAFC calls a function called spatioTemporalPoolingWeights.m when the inference engine needs to compute a template. The computation in the function is the same when we choose either 'linear' or 'quadratureEnergy'. It's not needed to get the template for phase-shifted stimuli when 'linear' is selected, so we can edit spatioTemporalPoolingWeights.m to speed up things a bit for the linear template. 
	DHB: perhaps we can.

5) if we set 'visualizeAllComponents' to be true when calling computePerformanceTAFC.m, then we can visualize the plot for cone responses. Perhaps we can also add a plotting function to visualize the trained classifier (line 131-133; theClassifierEngine.trainedClassifier) when 'visualizeAllComponents' is set to true. 
	DHB: perhaps we can.

6) when we compute templates by calling spatioTemporalPoolingWeights.m, it first computes the noise-free cone responses (size = 1 x #timeSamples x #cones), and then it selects the last time sample as the template. This could be problematic if someone creates a temporally modulated stimulus. 
	DHB: post the question to Nicolas.

7) @DHB: document quest 'blockedVal'

8) Figure out quest engine stopping rule and document (find out where minTrial & maxTrial is used)
	FH: questThresholdEngine.m, contrastThresholdEngine.m


Questions
2) How is the level of contrast determined given the range of slope and threshold? It is not super clear how that's derived. 
Observation 1: In classifierEngine, when defining classifier parameters, 'nTest' means the number of test trials for each given contrast level. 
Observation 2: When defining questEnginePara, the number of contrast level is largely affected by how fine estDomain & slopeRange are (with 'nTest' being fixed).
Observation 3: When estDomain & slopeRange are fixed, 'nTest' also affects the number of test contrast levels.

3) In spatioTemporalPoolingWeights.m, why is the de-meaned cone responses then multiplied by a Gaussian envelope to make a template?
